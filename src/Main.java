import java.util.Random;

/**
 * Simulation single entry point.
 */
public class Main {
	
	/**
	 * Pseudo-random number generator.
	 */
	private static final Random PRNG = new Random();
	
	/**
	 * Current visible symbols on the screen.
	 */
	private static final int[][] view = {
		new int[]{ -1, -1, -1, -1, -1, -1 },
		new int[]{ -1, -1, -1, -1, -1, -1 },
		new int[]{ -1, -1, -1, -1, -1, -1 },
		new int[]{ -1, -1, -1, -1, -1, -1 },
		new int[]{ -1, -1, -1, -1, -1, -1 },
	};
	
	/**
	 * List of symbols names.
	 */
	private static final String[] symbols = {
		"             ",
		"             ",
		"             ",
		"Single Milk  ",
		"Single White ",
		"Choco Spiral ",
		"Lollipop     ",
		"Heart Stripe ",
		"Choco Heart  ",
		"Choco Round  ",
		"Choco Shell  ",
		"Spiral Stripe",
		"Top Free     ",
		"Bottom Free  ",
		"Top Milk     ",
		"Bottom Milk  ",
		"Top White    ",
		"Bottom White ",
		"             ",
		"             ",
	};
	
	/**
	 * Slot game pay table.
	 */
	private static final int[][] paytable = {
			{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	780,	510,	240,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	790,	530,	270,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	800,	550,	300,	50,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	810,	570,	330,	90,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	820,	590,	360,	130,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	830,	610,	390,	170,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	840,	630,	420,	210,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	850,	650,	450,	250,	50,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	860,	670,	480,	290,	100,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	870,	690,	510,	330,	150,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	880,	710,	540,	370,	200,	30,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	890,	730,	570,	410,	250,	90,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	900,	750,	600,	450,	300,	150,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	910,	770,	630,	490,	350,	210,	70,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	920,	790,	660,	530,	400,	270,	140,	10,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	930,	810,	690,	570,	450,	330,	210,	90,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	940,	830,	720,	610,	500,	390,	280,	170,	60,	0,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	950,	850,	750,	650,	550,	450,	350,	250,	150,	50,	0,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	960,	870,	780,	690,	600,	510,	420,	330,	240,	150,	60,	0,	0,	0,	0,	0,	0,	0},
			{0,	0,	0,	970,	890,	810,	730,	650,	570,	490,	410,	330,	250,	170,	90,	10,	0,	0,	0,	0,	0},
			{0,	0,	0,	980,	910,	840,	770,	700,	630,	560,	490,	420,	350,	280,	210,	140,	70,	0,	0,	0,	0},
			{0,	0,	0,	990,	930,	870,	810,	750,	690,	630,	570,	510,	450,	390,	330,	270,	210,	150,	90,	30,	0},
			{0,	0,	0,	1000,	950,	900,	850,	800,	750,	700,	650,	600,	550,	500,	450,	400,	350,	300,	250,	0,	0},	};
	
	/**
	 * Slot game pay table.
	 */
	private static final int[][] clusters = {
		{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,},
		{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,},
		{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,},
		{0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,},
		{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,},
		{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,},
		{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
	};

	/**
	 * Strips with symbols.
	 * 
	 * Free spins, double milk and double white are symbols which should be always in pairs.
	 */
	private static final int[][] reels = {
		{11,8,9,7,8,4,12,13,7,5,9,7,8,7,16,17,7,16,17,8,14,15,5,7,10,16,8,3,14,15,9,9,10,7,8,7,16,17,3,12,13,4,9,11,10,16,17,7,16,17,5,3,8,8,10,16,17,7,6,8,11,7,3,},
		{8,4,10,4,7,12,13,16,17,8,9,7,5,11,14,15,10,12,13,4,10,10,10,4,4,8,10,4,5,6,16,17,3,11,16,17,6,10,3,9,14,15,5,16,17,9,3,16,17,12,13,5,10,6,4,7,5,16,17,14,15,3,5,},
		{10,8,11,9,3,8,4,10,14,15,5,16,17,6,5,3,11,3,7,11,10,14,15,5,3,10,4,16,17,14,15,12,13,10,12,13,4,14,15,5,6,16,17,5,8,9,3,4,7,8,6,3,16,17,3,5,9,3,4,6,4,5,7,},
		{14,15,3,14,15,7,16,17,7,4,16,17,3,4,6,7,12,13,7,16,17,8,16,17,8,3,4,5,8,9,10,4,9,9,5,8,3,9,14,15,3,4,12,13,10,11,9,8,3,4,5,12,13,7,3,4,12,13,5,6,5,8,6,},
		{3,6,5,4,6,11,9,4,6,5,4,16,17,4,7,5,8,6,7,14,15,10,3,6,8,7,12,13,10,3,8,11,16,17,14,15,12,13,3,4,16,17,9,6,16,17,16,17,5,3,7,10,11,10,12,13,10,16,17,5,3,4,9,},	
	};
	
	public static void main(String[] args) {
	}

}
